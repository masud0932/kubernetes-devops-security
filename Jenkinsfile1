pipeline {
  agent any
  tools {
    maven 'maven'
    }

  stages {
 
      stage('Maven version check') {
        steps {
          sh "mvn --version"
        }
      }
    
    stage('Build Artifact - Maven') {
      steps {
        sh "mvn clean package"
        archive 'target/*.jar'
      }
    }

stage('Docker Build and Push') {
  steps {
    withDockerRegistry([credentialsId: "docker_credential", url: ""]) {
        sh "ls -l"
        sh "ls -l target"
        sh "docker build -t masudrana09/numeric-app:latest ."
        sh "docker push masudrana09/numeric-app:latest"
      }
    }
  }

      stage('Vulnerability Scan - Kubernetes') {
      steps {
        parallel(
          "OPA Scan": {
            sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-k8s-security.rego deployment.yaml service.yaml'
          },
          "Kubesec Scan": {
            sh "bash kubesec-scan.sh"
          }
        )
      }
    }
    //stage('K8S Deployment - DEV') {
      //steps {
        //      withKubeConfig([credentialsId: 'kubeconfig']) {
          //    sh "kubectl apply -f deployment.yaml"
            //  sh "kubectl apply -f service.yaml"
         //   }
    //      }
    //  }
  stage('K8S Deployment - DEV') {
      steps {
        parallel(
          "Deployment": {
            withKubeConfig([credentialsId: 'kubeconfig']) {
              sh "bash k8s-deployment.sh"
            }
          },
          "Rollout Status": {
            withKubeConfig([credentialsId: 'kubeconfig']) {
              sh "bash k8s-deployment-rollout-status.sh"
            }
          }
        )
      }
    }
  }
  }
